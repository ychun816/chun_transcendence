// @flow

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type String = string;
/**
 * A CSS rule.
 */
export type Rule<D = Declaration, M = MediaQuery> =
  | {|
      type: "media",
      value: MediaRule<D, M>,
    |}
  | {|
      type: "import",
      value: ImportRule<M>,
    |}
  | {|
      type: "style",
      value: StyleRule<D, M>,
    |}
  | {|
      type: "keyframes",
      value: KeyframesRule<D>,
    |}
  | {|
      type: "font-face",
      value: FontFaceRule,
    |}
  | {|
      type: "font-palette-values",
      value: FontPaletteValuesRule,
    |}
  | {|
      type: "font-feature-values",
      value: FontFeatureValuesRule,
    |}
  | {|
      type: "page",
      value: PageRule<D>,
    |}
  | {|
      type: "supports",
      value: SupportsRule<D, M>,
    |}
  | {|
      type: "counter-style",
      value: CounterStyleRule<D>,
    |}
  | {|
      type: "namespace",
      value: NamespaceRule,
    |}
  | {|
      type: "moz-document",
      value: MozDocumentRule<D, M>,
    |}
  | {|
      type: "nesting",
      value: NestingRule<D, M>,
    |}
  | {|
      type: "nested-declarations",
      value: NestedDeclarationsRule<D>,
    |}
  | {|
      type: "viewport",
      value: ViewportRule<D>,
    |}
  | {|
      type: "custom-media",
      value: CustomMediaRule<M>,
    |}
  | {|
      type: "layer-statement",
      value: LayerStatementRule,
    |}
  | {|
      type: "layer-block",
      value: LayerBlockRule<D, M>,
    |}
  | {|
      type: "property",
      value: PropertyRule,
    |}
  | {|
      type: "container",
      value: ContainerRule<D, M>,
    |}
  | {|
      type: "scope",
      value: ScopeRule<D, M>,
    |}
  | {|
      type: "starting-style",
      value: StartingStyleRule<D, M>,
    |}
  | {|
      type: "view-transition",
      value: ViewTransitionRule,
    |}
  | {|
      type: "ignored",
    |}
  | {|
      type: "unknown",
      value: UnknownAtRule,
    |}
  | {|
      type: "custom",
      value: DefaultAtRule,
    |};
/**
 * Represents a media condition.
 */
export type MediaCondition =
  | {|
      type: "feature",
      value: QueryFeatureFor_MediaFeatureId,
    |}
  | {|
      type: "not",
      value: MediaCondition,
    |}
  | {|
      /**
       * The conditions for the operator.
       */
      conditions: MediaCondition[],

      /**
       * The operator for the conditions.
       */
      operator: Operator,
      type: "operation",
    |};
/**
 * A generic media feature or container feature.
 */
export type QueryFeatureFor_MediaFeatureId =
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,
      type: "plain",

      /**
       * The feature value.
       */
      value: MediaFeatureValue,
    |}
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,
      type: "boolean",
    |}
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,

      /**
       * A comparator.
       */
      operator: MediaFeatureComparison,
      type: "range",

      /**
       * The feature value.
       */
      value: MediaFeatureValue,
    |}
  | {|
      /**
       * The end value.
       */
      end: MediaFeatureValue,

      /**
       * A comparator for the end value.
       */
      endOperator: MediaFeatureComparison,

      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,

      /**
       * A start value.
       */
      start: MediaFeatureValue,

      /**
       * A comparator for the start value.
       */
      startOperator: MediaFeatureComparison,
      type: "interval",
    |};
/**
 * A media feature name.
 */
export type MediaFeatureNameFor_MediaFeatureId =
  | MediaFeatureId
  | String
  | String;
/**
 * A media query feature identifier.
 */
export type MediaFeatureId =
  | "width"
  | "height"
  | "aspect-ratio"
  | "orientation"
  | "overflow-block"
  | "overflow-inline"
  | "horizontal-viewport-segments"
  | "vertical-viewport-segments"
  | "display-mode"
  | "resolution"
  | "scan"
  | "grid"
  | "update"
  | "environment-blending"
  | "color"
  | "color-index"
  | "monochrome"
  | "color-gamut"
  | "dynamic-range"
  | "inverted-colors"
  | "pointer"
  | "hover"
  | "any-pointer"
  | "any-hover"
  | "nav-controls"
  | "video-color-gamut"
  | "video-dynamic-range"
  | "scripting"
  | "prefers-reduced-motion"
  | "prefers-reduced-transparency"
  | "prefers-contrast"
  | "forced-colors"
  | "prefers-color-scheme"
  | "prefers-reduced-data"
  | "device-width"
  | "device-height"
  | "device-aspect-ratio"
  | "-webkit-device-pixel-ratio"
  | "-moz-device-pixel-ratio";
/**
 * [media feature value](https://drafts.csswg.org/mediaqueries/#typedef-mf-value) within a media query.
 *
 * See [MediaFeature](MediaFeature).
 */
export type MediaFeatureValue =
  | {|
      type: "length",
      value: Length,
    |}
  | {|
      type: "number",
      value: number,
    |}
  | {|
      type: "integer",
      value: number,
    |}
  | {|
      type: "boolean",
      value: boolean,
    |}
  | {|
      type: "resolution",
      value: Resolution,
    |}
  | {|
      type: "ratio",
      value: Ratio,
    |}
  | {|
      type: "ident",
      value: String,
    |}
  | {|
      type: "env",
      value: EnvironmentVariable,
    |};
/**
 * A CSS [`<length>`](https://www.w3.org/TR/css-values-4/#lengths) value, with support for `calc()`.
 */
export type Length =
  | {|
      type: "value",
      value: LengthValue,
    |}
  | {|
      type: "calc",
      value: CalcFor_Length,
    |};
export type LengthUnit =
  | "px"
  | "in"
  | "cm"
  | "mm"
  | "q"
  | "pt"
  | "pc"
  | "em"
  | "rem"
  | "ex"
  | "rex"
  | "ch"
  | "rch"
  | "cap"
  | "rcap"
  | "ic"
  | "ric"
  | "lh"
  | "rlh"
  | "vw"
  | "lvw"
  | "svw"
  | "dvw"
  | "cqw"
  | "vh"
  | "lvh"
  | "svh"
  | "dvh"
  | "cqh"
  | "vi"
  | "svi"
  | "lvi"
  | "dvi"
  | "cqi"
  | "vb"
  | "svb"
  | "lvb"
  | "dvb"
  | "cqb"
  | "vmin"
  | "svmin"
  | "lvmin"
  | "dvmin"
  | "cqmin"
  | "vmax"
  | "svmax"
  | "lvmax"
  | "dvmax"
  | "cqmax";
/**
 * A mathematical expression used within the [`calc()`](https://www.w3.org/TR/css-values-4/#calc-func) function.
 *
 * This type supports generic value types. Values such as [Length](super::length::Length), [Percentage](super::percentage::Percentage), [Time](super::time::Time), and [Angle](super::angle::Angle) support `calc()` expressions.
 */
export type CalcFor_Length =
  | {|
      type: "value",
      value: Length,
    |}
  | {|
      type: "number",
      value: number,
    |}
  | {|
      type: "sum",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length],
    |}
  | {|
      type: "product",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [number, CalcFor_Length],
    |}
  | {|
      type: "function",
      value: MathFunctionFor_Length,
    |};
/**
 * A CSS [math function](https://www.w3.org/TR/css-values-4/#math-function).
 *
 * Math functions may be used in most properties and values that accept numeric values, including lengths, percentages, angles, times, etc.
 */
export type MathFunctionFor_Length =
  | {|
      type: "calc",
      value: CalcFor_Length,
    |}
  | {|
      type: "min",
      value: CalcFor_Length[],
    |}
  | {|
      type: "max",
      value: CalcFor_Length[],
    |}
  | {|
      type: "clamp",

      /**
       * @minItems 3
       * @maxItems 3
       */
      value: [CalcFor_Length, CalcFor_Length, CalcFor_Length],
    |}
  | {|
      type: "round",

      /**
       * @minItems 3
       * @maxItems 3
       */
      value: [RoundingStrategy, CalcFor_Length, CalcFor_Length],
    |}
  | {|
      type: "rem",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length],
    |}
  | {|
      type: "mod",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length],
    |}
  | {|
      type: "abs",
      value: CalcFor_Length,
    |}
  | {|
      type: "sign",
      value: CalcFor_Length,
    |}
  | {|
      type: "hypot",
      value: CalcFor_Length[],
    |};
/**
 * A [rounding strategy](https://www.w3.org/TR/css-values-4/#typedef-rounding-strategy), as used in the `round()` function.
 */
export type RoundingStrategy = "nearest" | "up" | "down" | "to-zero";
/**
 * A CSS [`<resolution>`](https://www.w3.org/TR/css-values-4/#resolution) value.
 */
export type Resolution =
  | {|
      type: "dpi",
      value: number,
    |}
  | {|
      type: "dpcm",
      value: number,
    |}
  | {|
      type: "dppx",
      value: number,
    |};
/**
 * A CSS [`<ratio>`](https://www.w3.org/TR/css-values-4/#ratios) value, representing the ratio of two numeric values.
 * @minItems 2
 * @maxItems 2
 */
export type Ratio = [number, number];
/**
 * A raw CSS token, or a parsed value.
 */
export type TokenOrValue =
  | {|
      type: "token",
      value: Token,
    |}
  | {|
      type: "color",
      value: CssColor,
    |}
  | {|
      type: "unresolved-color",
      value: UnresolvedColor,
    |}
  | {|
      type: "url",
      value: Url,
    |}
  | {|
      type: "var",
      value: Variable,
    |}
  | {|
      type: "env",
      value: EnvironmentVariable,
    |}
  | {|
      type: "function",
      value: Function,
    |}
  | {|
      type: "length",
      value: LengthValue,
    |}
  | {|
      type: "angle",
      value: Angle,
    |}
  | {|
      type: "time",
      value: Time,
    |}
  | {|
      type: "resolution",
      value: Resolution,
    |}
  | {|
      type: "dashed-ident",
      value: String,
    |}
  | {|
      type: "animation-name",
      value: AnimationName,
    |};
/**
 * A raw CSS token.
 */
export type Token =
  | {|
      type: "ident",
      value: String,
    |}
  | {|
      type: "at-keyword",
      value: String,
    |}
  | {|
      type: "hash",
      value: String,
    |}
  | {|
      type: "id-hash",
      value: String,
    |}
  | {|
      type: "string",
      value: String,
    |}
  | {|
      type: "unquoted-url",
      value: String,
    |}
  | {|
      type: "delim",
      value: string,
    |}
  | {|
      type: "number",

      /**
       * The value as a float
       */
      value: number,
    |}
  | {|
      type: "percentage",

      /**
       * The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.
       */
      value: number,
    |}
  | {|
      type: "dimension",

      /**
       * The unit, e.g. "px" in `12px`
       */
      unit: String,

      /**
       * The value as a float
       */
      value: number,
    |}
  | {|
      type: "white-space",
      value: String,
    |}
  | {|
      type: "comment",
      value: String,
    |}
  | {|
      type: "colon",
    |}
  | {|
      type: "semicolon",
    |}
  | {|
      type: "comma",
    |}
  | {|
      type: "include-match",
    |}
  | {|
      type: "dash-match",
    |}
  | {|
      type: "prefix-match",
    |}
  | {|
      type: "suffix-match",
    |}
  | {|
      type: "substring-match",
    |}
  | {|
      type: "cdo",
    |}
  | {|
      type: "cdc",
    |}
  | {|
      type: "function",
      value: String,
    |}
  | {|
      type: "parenthesis-block",
    |}
  | {|
      type: "square-bracket-block",
    |}
  | {|
      type: "curly-bracket-block",
    |}
  | {|
      type: "bad-url",
      value: String,
    |}
  | {|
      type: "bad-string",
      value: String,
    |}
  | {|
      type: "close-parenthesis",
    |}
  | {|
      type: "close-square-bracket",
    |}
  | {|
      type: "close-curly-bracket",
    |};
/**
 * A CSS [`<color>`](https://www.w3.org/TR/css-color-4/#color-type) value.
 *
 * CSS supports many different color spaces to represent colors. The most common values are stored as RGBA using a single byte per component. Less common values are stored using a `Box` to reduce the amount of memory used per color.
 *
 * Each color space is represented as a struct that implements the `From` and `Into` traits for all other color spaces, so it is possible to convert between color spaces easily. In addition, colors support [interpolation](#method.interpolate) as in the `color-mix()` function.
 */
export type CssColor =
  | CurrentColor
  | RGBColor
  | LABColor
  | PredefinedColor
  | FloatColor
  | LightDark
  | SystemColor;
export type CurrentColor = {|
  type: "currentcolor",
|};
export type RGBColor = {|
  /**
   * The alpha component.
   */
  alpha: number,

  /**
   * The blue component.
   */
  b: number,

  /**
   * The green component.
   */
  g: number,

  /**
   * The red component.
   */
  r: number,
  type: "rgb",
|};
/**
 * A color in a LAB color space, including the `lab()`, `lch()`, `oklab()`, and `oklch()` functions.
 */
export type LABColor =
  | {|
      /**
       * The a component.
       */
      a: number,

      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The b component.
       */
      b: number,

      /**
       * The lightness component.
       */
      l: number,
      type: "lab",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The chroma component.
       */
      c: number,

      /**
       * The hue component.
       */
      h: number,

      /**
       * The lightness component.
       */
      l: number,
      type: "lch",
    |}
  | {|
      /**
       * The a component.
       */
      a: number,

      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The b component.
       */
      b: number,

      /**
       * The lightness component.
       */
      l: number,
      type: "oklab",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The chroma component.
       */
      c: number,

      /**
       * The hue component.
       */
      h: number,

      /**
       * The lightness component.
       */
      l: number,
      type: "oklch",
    |};
/**
 * A color in a predefined color space, e.g. `display-p3`.
 */
export type PredefinedColor =
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "srgb",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "srgb-linear",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "display-p3",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "a98-rgb",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "prophoto-rgb",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "rec2020",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,
      type: "xyz-d50",

      /**
       * The x component.
       */
      x: number,

      /**
       * The y component.
       */
      y: number,

      /**
       * The z component.
       */
      z: number,
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,
      type: "xyz-d65",

      /**
       * The x component.
       */
      x: number,

      /**
       * The y component.
       */
      y: number,

      /**
       * The z component.
       */
      z: number,
    |};
/**
 * A floating point representation of color types that are usually stored as RGBA. These are used when there are any `none` components, which are represented as NaN.
 */
export type FloatColor =
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "rgb",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The hue component.
       */
      h: number,

      /**
       * The lightness component.
       */
      l: number,

      /**
       * The saturation component.
       */
      s: number,
      type: "hsl",
    |}
  | {|
      /**
       * The alpha component.
       */
      alpha: number,

      /**
       * The blackness component.
       */
      b: number,

      /**
       * The hue component.
       */
      h: number,
      type: "hwb",

      /**
       * The whiteness component.
       */
      w: number,
    |};
export type LightDark = {|
  dark: CssColor,
  light: CssColor,
  type: "light-dark",
|};
/**
 * A CSS [system color](https://drafts.csswg.org/css-color/#css-system-colors) keyword.
 */
export type SystemColor =
  | "accentcolor"
  | "accentcolortext"
  | "activetext"
  | "buttonborder"
  | "buttonface"
  | "buttontext"
  | "canvas"
  | "canvastext"
  | "field"
  | "fieldtext"
  | "graytext"
  | "highlight"
  | "highlighttext"
  | "linktext"
  | "mark"
  | "marktext"
  | "selecteditem"
  | "selecteditemtext"
  | "visitedtext"
  | "activeborder"
  | "activecaption"
  | "appworkspace"
  | "background"
  | "buttonhighlight"
  | "buttonshadow"
  | "captiontext"
  | "inactiveborder"
  | "inactivecaption"
  | "inactivecaptiontext"
  | "infobackground"
  | "infotext"
  | "menu"
  | "menutext"
  | "scrollbar"
  | "threeddarkshadow"
  | "threedface"
  | "threedhighlight"
  | "threedlightshadow"
  | "threedshadow"
  | "window"
  | "windowframe"
  | "windowtext";
/**
 * A color value with an unresolved alpha value (e.g. a variable). These can be converted from the modern slash syntax to older comma syntax. This can only be done when the only unresolved component is the alpha since variables can resolve to multiple tokens.
 */
export type UnresolvedColor =
  | {|
      /**
       * The unresolved alpha component.
       */
      alpha: TokenOrValue[],

      /**
       * The blue component.
       */
      b: number,

      /**
       * The green component.
       */
      g: number,

      /**
       * The red component.
       */
      r: number,
      type: "rgb",
    |}
  | {|
      /**
       * The unresolved alpha component.
       */
      alpha: TokenOrValue[],

      /**
       * The hue component.
       */
      h: number,

      /**
       * The lightness component.
       */
      l: number,

      /**
       * The saturation component.
       */
      s: number,
      type: "hsl",
    |}
  | {|
      /**
       * The dark value.
       */
      dark: TokenOrValue[],

      /**
       * The light value.
       */
      light: TokenOrValue[],
      type: "light-dark",
    |};
/**
 * Defines where the class names referenced in the `composes` property are located.
 *
 * See [Composes](Composes).
 */
export type Specifier =
  | {|
      type: "global",
    |}
  | {|
      type: "file",
      value: String,
    |}
  | {|
      type: "source-index",
      value: number,
    |};
/**
 * A CSS [`<angle>`](https://www.w3.org/TR/css-values-4/#angles) value.
 *
 * Angles may be explicit or computed by `calc()`, but are always stored and serialized as their computed value.
 */
export type Angle =
  | {|
      type: "deg",
      value: number,
    |}
  | {|
      type: "rad",
      value: number,
    |}
  | {|
      type: "grad",
      value: number,
    |}
  | {|
      type: "turn",
      value: number,
    |};
/**
 * A CSS [`<time>`](https://www.w3.org/TR/css-values-4/#time) value, in either seconds or milliseconds.
 *
 * Time values may be explicit or computed by `calc()`, but are always stored and serialized as their computed value.
 */
export type Time =
  | {|
      type: "seconds",
      value: number,
    |}
  | {|
      type: "milliseconds",
      value: number,
    |};
/**
 * A value for the [animation-name](https://drafts.csswg.org/css-animations/#animation-name) property.
 */
export type AnimationName =
  | {|
      type: "none",
    |}
  | {|
      type: "ident",
      value: String,
    |}
  | {|
      type: "string",
      value: String,
    |};
/**
 * A CSS environment variable name.
 */
export type EnvironmentVariableName =
  | {|
      type: "ua",
      value: UAEnvironmentVariable,
    |}
  | {|
      /**
       * CSS modules extension: the filename where the variable is defined. Only enabled when the CSS modules `dashed_idents` option is turned on.
       */
      from?: Specifier | null,

      /**
       * The referenced identifier.
       */
      ident: String,
      type: "custom",
    |}
  | {|
      type: "unknown",
      value: String,
    |};
/**
 * A UA-defined environment variable name.
 */
export type UAEnvironmentVariable =
  | "safe-area-inset-top"
  | "safe-area-inset-right"
  | "safe-area-inset-bottom"
  | "safe-area-inset-left"
  | "viewport-segment-width"
  | "viewport-segment-height"
  | "viewport-segment-top"
  | "viewport-segment-left"
  | "viewport-segment-bottom"
  | "viewport-segment-right";
/**
 * A [comparator](https://drafts.csswg.org/mediaqueries/#typedef-mf-comparison) within a media query.
 */
export type MediaFeatureComparison =
  | "equal"
  | "greater-than"
  | "greater-than-equal"
  | "less-than"
  | "less-than-equal";
/**
 * A binary `and` or `or` operator.
 */
export type Operator = "and" | "or";
export type MediaType = string;
/**
 * A [media query qualifier](https://drafts.csswg.org/mediaqueries/#mq-prefix).
 */
export type Qualifier = "only" | "not";
/**
 * A [`<supports-condition>`](https://drafts.csswg.org/css-conditional-3/#typedef-supports-condition), as used in the `@supports` and `@import` rules.
 */
export type SupportsCondition =
  | {|
      type: "not",
      value: SupportsCondition,
    |}
  | {|
      type: "and",
      value: SupportsCondition[],
    |}
  | {|
      type: "or",
      value: SupportsCondition[],
    |}
  | {|
      /**
       * The property id for the declaration.
       */
      propertyId: PropertyId,
      type: "declaration",

      /**
       * The raw value of the declaration.
       */
      value: String,
    |}
  | {|
      type: "selector",
      value: String,
    |}
  | {|
      type: "unknown",
      value: String,
    |};
export type PropertyId =
  | {|
      property: "background-color",
    |}
  | {|
      property: "background-image",
    |}
  | {|
      property: "background-position-x",
    |}
  | {|
      property: "background-position-y",
    |}
  | {|
      property: "background-position",
    |}
  | {|
      property: "background-size",
    |}
  | {|
      property: "background-repeat",
    |}
  | {|
      property: "background-attachment",
    |}
  | {|
      property: "background-clip",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "background-origin",
    |}
  | {|
      property: "background",
    |}
  | {|
      property: "box-shadow",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "opacity",
    |}
  | {|
      property: "color",
    |}
  | {|
      property: "display",
    |}
  | {|
      property: "visibility",
    |}
  | {|
      property: "width",
    |}
  | {|
      property: "height",
    |}
  | {|
      property: "min-width",
    |}
  | {|
      property: "min-height",
    |}
  | {|
      property: "max-width",
    |}
  | {|
      property: "max-height",
    |}
  | {|
      property: "block-size",
    |}
  | {|
      property: "inline-size",
    |}
  | {|
      property: "min-block-size",
    |}
  | {|
      property: "min-inline-size",
    |}
  | {|
      property: "max-block-size",
    |}
  | {|
      property: "max-inline-size",
    |}
  | {|
      property: "box-sizing",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "aspect-ratio",
    |}
  | {|
      property: "overflow",
    |}
  | {|
      property: "overflow-x",
    |}
  | {|
      property: "overflow-y",
    |}
  | {|
      property: "text-overflow",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "position",
    |}
  | {|
      property: "top",
    |}
  | {|
      property: "bottom",
    |}
  | {|
      property: "left",
    |}
  | {|
      property: "right",
    |}
  | {|
      property: "inset-block-start",
    |}
  | {|
      property: "inset-block-end",
    |}
  | {|
      property: "inset-inline-start",
    |}
  | {|
      property: "inset-inline-end",
    |}
  | {|
      property: "inset-block",
    |}
  | {|
      property: "inset-inline",
    |}
  | {|
      property: "inset",
    |}
  | {|
      property: "border-spacing",
    |}
  | {|
      property: "border-top-color",
    |}
  | {|
      property: "border-bottom-color",
    |}
  | {|
      property: "border-left-color",
    |}
  | {|
      property: "border-right-color",
    |}
  | {|
      property: "border-block-start-color",
    |}
  | {|
      property: "border-block-end-color",
    |}
  | {|
      property: "border-inline-start-color",
    |}
  | {|
      property: "border-inline-end-color",
    |}
  | {|
      property: "border-top-style",
    |}
  | {|
      property: "border-bottom-style",
    |}
  | {|
      property: "border-left-style",
    |}
  | {|
      property: "border-right-style",
    |}
  | {|
      property: "border-block-start-style",
    |}
  | {|
      property: "border-block-end-style",
    |}
  | {|
      property: "border-inline-start-style",
    |}
  | {|
      property: "border-inline-end-style",
    |}
  | {|
      property: "border-top-width",
    |}
  | {|
      property: "border-bottom-width",
    |}
  | {|
      property: "border-left-width",
    |}
  | {|
      property: "border-right-width",
    |}
  | {|
      property: "border-block-start-width",
    |}
  | {|
      property: "border-block-end-width",
    |}
  | {|
      property: "border-inline-start-width",
    |}
  | {|
      property: "border-inline-end-width",
    |}
  | {|
      property: "border-top-left-radius",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-top-right-radius",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-bottom-left-radius",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-bottom-right-radius",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-start-start-radius",
    |}
  | {|
      property: "border-start-end-radius",
    |}
  | {|
      property: "border-end-start-radius",
    |}
  | {|
      property: "border-end-end-radius",
    |}
  | {|
      property: "border-radius",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-image-source",
    |}
  | {|
      property: "border-image-outset",
    |}
  | {|
      property: "border-image-repeat",
    |}
  | {|
      property: "border-image-width",
    |}
  | {|
      property: "border-image-slice",
    |}
  | {|
      property: "border-image",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-color",
    |}
  | {|
      property: "border-style",
    |}
  | {|
      property: "border-width",
    |}
  | {|
      property: "border-block-color",
    |}
  | {|
      property: "border-block-style",
    |}
  | {|
      property: "border-block-width",
    |}
  | {|
      property: "border-inline-color",
    |}
  | {|
      property: "border-inline-style",
    |}
  | {|
      property: "border-inline-width",
    |}
  | {|
      property: "border",
    |}
  | {|
      property: "border-top",
    |}
  | {|
      property: "border-bottom",
    |}
  | {|
      property: "border-left",
    |}
  | {|
      property: "border-right",
    |}
  | {|
      property: "border-block",
    |}
  | {|
      property: "border-block-start",
    |}
  | {|
      property: "border-block-end",
    |}
  | {|
      property: "border-inline",
    |}
  | {|
      property: "border-inline-start",
    |}
  | {|
      property: "border-inline-end",
    |}
  | {|
      property: "outline",
    |}
  | {|
      property: "outline-color",
    |}
  | {|
      property: "outline-style",
    |}
  | {|
      property: "outline-width",
    |}
  | {|
      property: "flex-direction",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-wrap",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-flow",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-grow",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-shrink",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-basis",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "order",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "align-content",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-content",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "place-content",
    |}
  | {|
      property: "align-self",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-self",
    |}
  | {|
      property: "place-self",
    |}
  | {|
      property: "align-items",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-items",
    |}
  | {|
      property: "place-items",
    |}
  | {|
      property: "row-gap",
    |}
  | {|
      property: "column-gap",
    |}
  | {|
      property: "gap",
    |}
  | {|
      property: "box-orient",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-direction",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-ordinal-group",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-align",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-flex",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-flex-group",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-pack",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-lines",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-pack",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-order",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-align",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-item-align",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-line-pack",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-positive",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-negative",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-preferred-size",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "grid-template-columns",
    |}
  | {|
      property: "grid-template-rows",
    |}
  | {|
      property: "grid-auto-columns",
    |}
  | {|
      property: "grid-auto-rows",
    |}
  | {|
      property: "grid-auto-flow",
    |}
  | {|
      property: "grid-template-areas",
    |}
  | {|
      property: "grid-template",
    |}
  | {|
      property: "grid",
    |}
  | {|
      property: "grid-row-start",
    |}
  | {|
      property: "grid-row-end",
    |}
  | {|
      property: "grid-column-start",
    |}
  | {|
      property: "grid-column-end",
    |}
  | {|
      property: "grid-row",
    |}
  | {|
      property: "grid-column",
    |}
  | {|
      property: "grid-area",
    |}
  | {|
      property: "margin-top",
    |}
  | {|
      property: "margin-bottom",
    |}
  | {|
      property: "margin-left",
    |}
  | {|
      property: "margin-right",
    |}
  | {|
      property: "margin-block-start",
    |}
  | {|
      property: "margin-block-end",
    |}
  | {|
      property: "margin-inline-start",
    |}
  | {|
      property: "margin-inline-end",
    |}
  | {|
      property: "margin-block",
    |}
  | {|
      property: "margin-inline",
    |}
  | {|
      property: "margin",
    |}
  | {|
      property: "padding-top",
    |}
  | {|
      property: "padding-bottom",
    |}
  | {|
      property: "padding-left",
    |}
  | {|
      property: "padding-right",
    |}
  | {|
      property: "padding-block-start",
    |}
  | {|
      property: "padding-block-end",
    |}
  | {|
      property: "padding-inline-start",
    |}
  | {|
      property: "padding-inline-end",
    |}
  | {|
      property: "padding-block",
    |}
  | {|
      property: "padding-inline",
    |}
  | {|
      property: "padding",
    |}
  | {|
      property: "scroll-margin-top",
    |}
  | {|
      property: "scroll-margin-bottom",
    |}
  | {|
      property: "scroll-margin-left",
    |}
  | {|
      property: "scroll-margin-right",
    |}
  | {|
      property: "scroll-margin-block-start",
    |}
  | {|
      property: "scroll-margin-block-end",
    |}
  | {|
      property: "scroll-margin-inline-start",
    |}
  | {|
      property: "scroll-margin-inline-end",
    |}
  | {|
      property: "scroll-margin-block",
    |}
  | {|
      property: "scroll-margin-inline",
    |}
  | {|
      property: "scroll-margin",
    |}
  | {|
      property: "scroll-padding-top",
    |}
  | {|
      property: "scroll-padding-bottom",
    |}
  | {|
      property: "scroll-padding-left",
    |}
  | {|
      property: "scroll-padding-right",
    |}
  | {|
      property: "scroll-padding-block-start",
    |}
  | {|
      property: "scroll-padding-block-end",
    |}
  | {|
      property: "scroll-padding-inline-start",
    |}
  | {|
      property: "scroll-padding-inline-end",
    |}
  | {|
      property: "scroll-padding-block",
    |}
  | {|
      property: "scroll-padding-inline",
    |}
  | {|
      property: "scroll-padding",
    |}
  | {|
      property: "font-weight",
    |}
  | {|
      property: "font-size",
    |}
  | {|
      property: "font-stretch",
    |}
  | {|
      property: "font-family",
    |}
  | {|
      property: "font-style",
    |}
  | {|
      property: "font-variant-caps",
    |}
  | {|
      property: "line-height",
    |}
  | {|
      property: "font",
    |}
  | {|
      property: "vertical-align",
    |}
  | {|
      property: "font-palette",
    |}
  | {|
      property: "transition-property",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-duration",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-delay",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-timing-function",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-name",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-duration",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-timing-function",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-iteration-count",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-direction",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-play-state",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-delay",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-fill-mode",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-composition",
    |}
  | {|
      property: "animation-timeline",
    |}
  | {|
      property: "animation-range-start",
    |}
  | {|
      property: "animation-range-end",
    |}
  | {|
      property: "animation-range",
    |}
  | {|
      property: "animation",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-origin",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-style",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-box",
    |}
  | {|
      property: "backface-visibility",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "perspective",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "perspective-origin",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "translate",
    |}
  | {|
      property: "rotate",
    |}
  | {|
      property: "scale",
    |}
  | {|
      property: "text-transform",
    |}
  | {|
      property: "white-space",
    |}
  | {|
      property: "tab-size",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "word-break",
    |}
  | {|
      property: "line-break",
    |}
  | {|
      property: "hyphens",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "overflow-wrap",
    |}
  | {|
      property: "word-wrap",
    |}
  | {|
      property: "text-align",
    |}
  | {|
      property: "text-align-last",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-justify",
    |}
  | {|
      property: "word-spacing",
    |}
  | {|
      property: "letter-spacing",
    |}
  | {|
      property: "text-indent",
    |}
  | {|
      property: "text-decoration-line",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-style",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-color",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-thickness",
    |}
  | {|
      property: "text-decoration",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-skip-ink",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-style",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-color",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-position",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-shadow",
    |}
  | {|
      property: "text-size-adjust",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "direction",
    |}
  | {|
      property: "unicode-bidi",
    |}
  | {|
      property: "box-decoration-break",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "resize",
    |}
  | {|
      property: "cursor",
    |}
  | {|
      property: "caret-color",
    |}
  | {|
      property: "caret-shape",
    |}
  | {|
      property: "caret",
    |}
  | {|
      property: "user-select",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "accent-color",
    |}
  | {|
      property: "appearance",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "list-style-type",
    |}
  | {|
      property: "list-style-image",
    |}
  | {|
      property: "list-style-position",
    |}
  | {|
      property: "list-style",
    |}
  | {|
      property: "marker-side",
    |}
  | {|
      property: "composes",
    |}
  | {|
      property: "fill",
    |}
  | {|
      property: "fill-rule",
    |}
  | {|
      property: "fill-opacity",
    |}
  | {|
      property: "stroke",
    |}
  | {|
      property: "stroke-opacity",
    |}
  | {|
      property: "stroke-width",
    |}
  | {|
      property: "stroke-linecap",
    |}
  | {|
      property: "stroke-linejoin",
    |}
  | {|
      property: "stroke-miterlimit",
    |}
  | {|
      property: "stroke-dasharray",
    |}
  | {|
      property: "stroke-dashoffset",
    |}
  | {|
      property: "marker-start",
    |}
  | {|
      property: "marker-mid",
    |}
  | {|
      property: "marker-end",
    |}
  | {|
      property: "marker",
    |}
  | {|
      property: "color-interpolation",
    |}
  | {|
      property: "color-interpolation-filters",
    |}
  | {|
      property: "color-rendering",
    |}
  | {|
      property: "shape-rendering",
    |}
  | {|
      property: "text-rendering",
    |}
  | {|
      property: "image-rendering",
    |}
  | {|
      property: "clip-path",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "clip-rule",
    |}
  | {|
      property: "mask-image",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-mode",
    |}
  | {|
      property: "mask-repeat",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-position-x",
    |}
  | {|
      property: "mask-position-y",
    |}
  | {|
      property: "mask-position",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-clip",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-origin",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-size",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-composite",
    |}
  | {|
      property: "mask-type",
    |}
  | {|
      property: "mask",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-border-source",
    |}
  | {|
      property: "mask-border-mode",
    |}
  | {|
      property: "mask-border-slice",
    |}
  | {|
      property: "mask-border-width",
    |}
  | {|
      property: "mask-border-outset",
    |}
  | {|
      property: "mask-border-repeat",
    |}
  | {|
      property: "mask-border",
    |}
  | {|
      property: "-webkit-mask-composite",
    |}
  | {|
      property: "mask-source-type",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-source",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-slice",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-width",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-outset",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-repeat",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "filter",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "backdrop-filter",
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "z-index",
    |}
  | {|
      property: "container-type",
    |}
  | {|
      property: "container-name",
    |}
  | {|
      property: "container",
    |}
  | {|
      property: "view-transition-name",
    |}
  | {|
      property: "view-transition-class",
    |}
  | {|
      property: "view-transition-group",
    |}
  | {|
      property: "color-scheme",
    |}
  | {|
      property: "all",
    |}
  | {|
      property: string,
    |};
export type Prefix = "none" | "webkit" | "moz" | "ms" | "o";
export type VendorPrefix = Prefix[];
export type Declaration =
  | {|
      property: "background-color",
      value: CssColor,
    |}
  | {|
      property: "background-image",
      value: Image[],
    |}
  | {|
      property: "background-position-x",
      value: PositionComponentFor_HorizontalPositionKeyword[],
    |}
  | {|
      property: "background-position-y",
      value: PositionComponentFor_VerticalPositionKeyword[],
    |}
  | {|
      property: "background-position",
      value: BackgroundPosition[],
    |}
  | {|
      property: "background-size",
      value: BackgroundSize[],
    |}
  | {|
      property: "background-repeat",
      value: BackgroundRepeat[],
    |}
  | {|
      property: "background-attachment",
      value: BackgroundAttachment[],
    |}
  | {|
      property: "background-clip",
      value: BackgroundClip[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "background-origin",
      value: BackgroundOrigin[],
    |}
  | {|
      property: "background",
      value: Background[],
    |}
  | {|
      property: "box-shadow",
      value: BoxShadow[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "opacity",
      value: number,
    |}
  | {|
      property: "color",
      value: CssColor,
    |}
  | {|
      property: "display",
      value: Display,
    |}
  | {|
      property: "visibility",
      value: Visibility,
    |}
  | {|
      property: "width",
      value: Size,
    |}
  | {|
      property: "height",
      value: Size,
    |}
  | {|
      property: "min-width",
      value: Size,
    |}
  | {|
      property: "min-height",
      value: Size,
    |}
  | {|
      property: "max-width",
      value: MaxSize,
    |}
  | {|
      property: "max-height",
      value: MaxSize,
    |}
  | {|
      property: "block-size",
      value: Size,
    |}
  | {|
      property: "inline-size",
      value: Size,
    |}
  | {|
      property: "min-block-size",
      value: Size,
    |}
  | {|
      property: "min-inline-size",
      value: Size,
    |}
  | {|
      property: "max-block-size",
      value: MaxSize,
    |}
  | {|
      property: "max-inline-size",
      value: MaxSize,
    |}
  | {|
      property: "box-sizing",
      value: BoxSizing,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "aspect-ratio",
      value: AspectRatio,
    |}
  | {|
      property: "overflow",
      value: Overflow,
    |}
  | {|
      property: "overflow-x",
      value: OverflowKeyword,
    |}
  | {|
      property: "overflow-y",
      value: OverflowKeyword,
    |}
  | {|
      property: "text-overflow",
      value: TextOverflow,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "position",
      value: Position2,
    |}
  | {|
      property: "top",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "bottom",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "left",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "right",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "inset-block-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "inset-block-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "inset-inline-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "inset-inline-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "inset-block",
      value: InsetBlock,
    |}
  | {|
      property: "inset-inline",
      value: InsetInline,
    |}
  | {|
      property: "inset",
      value: Inset,
    |}
  | {|
      property: "border-spacing",
      value: Size2DFor_Length,
    |}
  | {|
      property: "border-top-color",
      value: CssColor,
    |}
  | {|
      property: "border-bottom-color",
      value: CssColor,
    |}
  | {|
      property: "border-left-color",
      value: CssColor,
    |}
  | {|
      property: "border-right-color",
      value: CssColor,
    |}
  | {|
      property: "border-block-start-color",
      value: CssColor,
    |}
  | {|
      property: "border-block-end-color",
      value: CssColor,
    |}
  | {|
      property: "border-inline-start-color",
      value: CssColor,
    |}
  | {|
      property: "border-inline-end-color",
      value: CssColor,
    |}
  | {|
      property: "border-top-style",
      value: LineStyle,
    |}
  | {|
      property: "border-bottom-style",
      value: LineStyle,
    |}
  | {|
      property: "border-left-style",
      value: LineStyle,
    |}
  | {|
      property: "border-right-style",
      value: LineStyle,
    |}
  | {|
      property: "border-block-start-style",
      value: LineStyle,
    |}
  | {|
      property: "border-block-end-style",
      value: LineStyle,
    |}
  | {|
      property: "border-inline-start-style",
      value: LineStyle,
    |}
  | {|
      property: "border-inline-end-style",
      value: LineStyle,
    |}
  | {|
      property: "border-top-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-bottom-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-left-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-right-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-block-start-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-block-end-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-inline-start-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-inline-end-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "border-top-left-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-top-right-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-bottom-left-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-bottom-right-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-start-start-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "border-start-end-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "border-end-start-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "border-end-end-radius",
      value: Size2DFor_DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "border-radius",
      value: BorderRadius,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-image-source",
      value: Image,
    |}
  | {|
      property: "border-image-outset",
      value: RectFor_LengthOrNumber,
    |}
  | {|
      property: "border-image-repeat",
      value: BorderImageRepeat,
    |}
  | {|
      property: "border-image-width",
      value: RectFor_BorderImageSideWidth,
    |}
  | {|
      property: "border-image-slice",
      value: BorderImageSlice,
    |}
  | {|
      property: "border-image",
      value: BorderImage,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "border-color",
      value: BorderColor,
    |}
  | {|
      property: "border-style",
      value: BorderStyle,
    |}
  | {|
      property: "border-width",
      value: BorderWidth,
    |}
  | {|
      property: "border-block-color",
      value: BorderBlockColor,
    |}
  | {|
      property: "border-block-style",
      value: BorderBlockStyle,
    |}
  | {|
      property: "border-block-width",
      value: BorderBlockWidth,
    |}
  | {|
      property: "border-inline-color",
      value: BorderInlineColor,
    |}
  | {|
      property: "border-inline-style",
      value: BorderInlineStyle,
    |}
  | {|
      property: "border-inline-width",
      value: BorderInlineWidth,
    |}
  | {|
      property: "border",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-top",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-bottom",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-left",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-right",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-block",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-block-start",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-block-end",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-inline",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-inline-start",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "border-inline-end",
      value: GenericBorderFor_LineStyle,
    |}
  | {|
      property: "outline",
      value: GenericBorderFor_OutlineStyleAnd_11,
    |}
  | {|
      property: "outline-color",
      value: CssColor,
    |}
  | {|
      property: "outline-style",
      value: OutlineStyle,
    |}
  | {|
      property: "outline-width",
      value: BorderSideWidth,
    |}
  | {|
      property: "flex-direction",
      value: FlexDirection,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-wrap",
      value: FlexWrap,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-flow",
      value: FlexFlow,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-grow",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-shrink",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-basis",
      value: LengthPercentageOrAuto,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex",
      value: Flex,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "order",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "align-content",
      value: AlignContent,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-content",
      value: JustifyContent,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "place-content",
      value: PlaceContent,
    |}
  | {|
      property: "align-self",
      value: AlignSelf,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-self",
      value: JustifySelf,
    |}
  | {|
      property: "place-self",
      value: PlaceSelf,
    |}
  | {|
      property: "align-items",
      value: AlignItems,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "justify-items",
      value: JustifyItems,
    |}
  | {|
      property: "place-items",
      value: PlaceItems,
    |}
  | {|
      property: "row-gap",
      value: GapValue,
    |}
  | {|
      property: "column-gap",
      value: GapValue,
    |}
  | {|
      property: "gap",
      value: Gap,
    |}
  | {|
      property: "box-orient",
      value: BoxOrient,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-direction",
      value: BoxDirection,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-ordinal-group",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-align",
      value: BoxAlign,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-flex",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-flex-group",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-pack",
      value: BoxPack,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "box-lines",
      value: BoxLines,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-pack",
      value: FlexPack,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-order",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-align",
      value: BoxAlign,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-item-align",
      value: FlexItemAlign,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-line-pack",
      value: FlexLinePack,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-positive",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-negative",
      value: number,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "flex-preferred-size",
      value: LengthPercentageOrAuto,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "grid-template-columns",
      value: TrackSizing,
    |}
  | {|
      property: "grid-template-rows",
      value: TrackSizing,
    |}
  | {|
      property: "grid-auto-columns",
      value: TrackSize[],
    |}
  | {|
      property: "grid-auto-rows",
      value: TrackSize[],
    |}
  | {|
      property: "grid-auto-flow",
      value: GridAutoFlow,
    |}
  | {|
      property: "grid-template-areas",
      value: GridTemplateAreas,
    |}
  | {|
      property: "grid-template",
      value: GridTemplate,
    |}
  | {|
      property: "grid",
      value: Grid,
    |}
  | {|
      property: "grid-row-start",
      value: GridLine,
    |}
  | {|
      property: "grid-row-end",
      value: GridLine,
    |}
  | {|
      property: "grid-column-start",
      value: GridLine,
    |}
  | {|
      property: "grid-column-end",
      value: GridLine,
    |}
  | {|
      property: "grid-row",
      value: GridRow,
    |}
  | {|
      property: "grid-column",
      value: GridColumn,
    |}
  | {|
      property: "grid-area",
      value: GridArea,
    |}
  | {|
      property: "margin-top",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-bottom",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-left",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-right",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-block-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-block-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-inline-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-inline-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "margin-block",
      value: MarginBlock,
    |}
  | {|
      property: "margin-inline",
      value: MarginInline,
    |}
  | {|
      property: "margin",
      value: Margin,
    |}
  | {|
      property: "padding-top",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-bottom",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-left",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-right",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-block-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-block-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-inline-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-inline-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "padding-block",
      value: PaddingBlock,
    |}
  | {|
      property: "padding-inline",
      value: PaddingInline,
    |}
  | {|
      property: "padding",
      value: Padding,
    |}
  | {|
      property: "scroll-margin-top",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-bottom",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-left",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-right",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-block-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-block-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-inline-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-inline-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-margin-block",
      value: ScrollMarginBlock,
    |}
  | {|
      property: "scroll-margin-inline",
      value: ScrollMarginInline,
    |}
  | {|
      property: "scroll-margin",
      value: ScrollMargin,
    |}
  | {|
      property: "scroll-padding-top",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-bottom",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-left",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-right",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-block-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-block-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-inline-start",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-inline-end",
      value: LengthPercentageOrAuto,
    |}
  | {|
      property: "scroll-padding-block",
      value: ScrollPaddingBlock,
    |}
  | {|
      property: "scroll-padding-inline",
      value: ScrollPaddingInline,
    |}
  | {|
      property: "scroll-padding",
      value: ScrollPadding,
    |}
  | {|
      property: "font-weight",
      value: FontWeight,
    |}
  | {|
      property: "font-size",
      value: FontSize,
    |}
  | {|
      property: "font-stretch",
      value: FontStretch,
    |}
  | {|
      property: "font-family",
      value: FontFamily[],
    |}
  | {|
      property: "font-style",
      value: FontStyle,
    |}
  | {|
      property: "font-variant-caps",
      value: FontVariantCaps,
    |}
  | {|
      property: "line-height",
      value: LineHeight,
    |}
  | {|
      property: "font",
      value: Font,
    |}
  | {|
      property: "vertical-align",
      value: VerticalAlign,
    |}
  | {|
      property: "font-palette",
      value: DashedIdentReference,
    |}
  | {|
      property: "transition-property",
      value: PropertyId[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-duration",
      value: Time[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-delay",
      value: Time[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition-timing-function",
      value: EasingFunction[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transition",
      value: Transition[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-name",
      value: AnimationName[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-duration",
      value: Time[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-timing-function",
      value: EasingFunction[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-iteration-count",
      value: AnimationIterationCount[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-direction",
      value: AnimationDirection[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-play-state",
      value: AnimationPlayState[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-delay",
      value: Time[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-fill-mode",
      value: AnimationFillMode[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "animation-composition",
      value: AnimationComposition[],
    |}
  | {|
      property: "animation-timeline",
      value: AnimationTimeline[],
    |}
  | {|
      property: "animation-range-start",
      value: AnimationRangeStart[],
    |}
  | {|
      property: "animation-range-end",
      value: AnimationRangeEnd[],
    |}
  | {|
      property: "animation-range",
      value: AnimationRange[],
    |}
  | {|
      property: "animation",
      value: Animation[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform",
      value: Transform[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-origin",
      value: Position,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-style",
      value: TransformStyle,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "transform-box",
      value: TransformBox,
    |}
  | {|
      property: "backface-visibility",
      value: BackfaceVisibility,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "perspective",
      value: Perspective,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "perspective-origin",
      value: Position,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "translate",
      value: Translate,
    |}
  | {|
      property: "rotate",
      value: Rotate,
    |}
  | {|
      property: "scale",
      value: Scale,
    |}
  | {|
      property: "text-transform",
      value: TextTransform,
    |}
  | {|
      property: "white-space",
      value: WhiteSpace,
    |}
  | {|
      property: "tab-size",
      value: LengthOrNumber,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "word-break",
      value: WordBreak,
    |}
  | {|
      property: "line-break",
      value: LineBreak,
    |}
  | {|
      property: "hyphens",
      value: Hyphens,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "overflow-wrap",
      value: OverflowWrap,
    |}
  | {|
      property: "word-wrap",
      value: OverflowWrap,
    |}
  | {|
      property: "text-align",
      value: TextAlign,
    |}
  | {|
      property: "text-align-last",
      value: TextAlignLast,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-justify",
      value: TextJustify,
    |}
  | {|
      property: "word-spacing",
      value: Spacing,
    |}
  | {|
      property: "letter-spacing",
      value: Spacing,
    |}
  | {|
      property: "text-indent",
      value: TextIndent,
    |}
  | {|
      property: "text-decoration-line",
      value: TextDecorationLine,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-style",
      value: TextDecorationStyle,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-color",
      value: CssColor,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-thickness",
      value: TextDecorationThickness,
    |}
  | {|
      property: "text-decoration",
      value: TextDecoration,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-decoration-skip-ink",
      value: TextDecorationSkipInk,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-style",
      value: TextEmphasisStyle,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-color",
      value: CssColor,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis",
      value: TextEmphasis,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-emphasis-position",
      value: TextEmphasisPosition,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "text-shadow",
      value: TextShadow[],
    |}
  | {|
      property: "text-size-adjust",
      value: TextSizeAdjust,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "direction",
      value: Direction2,
    |}
  | {|
      property: "unicode-bidi",
      value: UnicodeBidi,
    |}
  | {|
      property: "box-decoration-break",
      value: BoxDecorationBreak,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "resize",
      value: Resize,
    |}
  | {|
      property: "cursor",
      value: Cursor,
    |}
  | {|
      property: "caret-color",
      value: ColorOrAuto,
    |}
  | {|
      property: "caret-shape",
      value: CaretShape,
    |}
  | {|
      property: "caret",
      value: Caret,
    |}
  | {|
      property: "user-select",
      value: UserSelect,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "accent-color",
      value: ColorOrAuto,
    |}
  | {|
      property: "appearance",
      value: Appearance,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "list-style-type",
      value: ListStyleType,
    |}
  | {|
      property: "list-style-image",
      value: Image,
    |}
  | {|
      property: "list-style-position",
      value: ListStylePosition,
    |}
  | {|
      property: "list-style",
      value: ListStyle,
    |}
  | {|
      property: "marker-side",
      value: MarkerSide,
    |}
  | {|
      property: "composes",
      value: Composes,
    |}
  | {|
      property: "fill",
      value: SVGPaint,
    |}
  | {|
      property: "fill-rule",
      value: FillRule,
    |}
  | {|
      property: "fill-opacity",
      value: number,
    |}
  | {|
      property: "stroke",
      value: SVGPaint,
    |}
  | {|
      property: "stroke-opacity",
      value: number,
    |}
  | {|
      property: "stroke-width",
      value: DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "stroke-linecap",
      value: StrokeLinecap,
    |}
  | {|
      property: "stroke-linejoin",
      value: StrokeLinejoin,
    |}
  | {|
      property: "stroke-miterlimit",
      value: number,
    |}
  | {|
      property: "stroke-dasharray",
      value: StrokeDasharray,
    |}
  | {|
      property: "stroke-dashoffset",
      value: DimensionPercentageFor_LengthValue,
    |}
  | {|
      property: "marker-start",
      value: Marker,
    |}
  | {|
      property: "marker-mid",
      value: Marker,
    |}
  | {|
      property: "marker-end",
      value: Marker,
    |}
  | {|
      property: "marker",
      value: Marker,
    |}
  | {|
      property: "color-interpolation",
      value: ColorInterpolation,
    |}
  | {|
      property: "color-interpolation-filters",
      value: ColorInterpolation,
    |}
  | {|
      property: "color-rendering",
      value: ColorRendering,
    |}
  | {|
      property: "shape-rendering",
      value: ShapeRendering,
    |}
  | {|
      property: "text-rendering",
      value: TextRendering,
    |}
  | {|
      property: "image-rendering",
      value: ImageRendering,
    |}
  | {|
      property: "clip-path",
      value: ClipPath,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "clip-rule",
      value: FillRule,
    |}
  | {|
      property: "mask-image",
      value: Image[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-mode",
      value: MaskMode[],
    |}
  | {|
      property: "mask-repeat",
      value: BackgroundRepeat[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-position-x",
      value: PositionComponentFor_HorizontalPositionKeyword[],
    |}
  | {|
      property: "mask-position-y",
      value: PositionComponentFor_VerticalPositionKeyword[],
    |}
  | {|
      property: "mask-position",
      value: Position[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-clip",
      value: MaskClip[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-origin",
      value: GeometryBox[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-size",
      value: BackgroundSize[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-composite",
      value: MaskComposite[],
    |}
  | {|
      property: "mask-type",
      value: MaskType,
    |}
  | {|
      property: "mask",
      value: Mask[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-border-source",
      value: Image,
    |}
  | {|
      property: "mask-border-mode",
      value: MaskBorderMode,
    |}
  | {|
      property: "mask-border-slice",
      value: BorderImageSlice,
    |}
  | {|
      property: "mask-border-width",
      value: RectFor_BorderImageSideWidth,
    |}
  | {|
      property: "mask-border-outset",
      value: RectFor_LengthOrNumber,
    |}
  | {|
      property: "mask-border-repeat",
      value: BorderImageRepeat,
    |}
  | {|
      property: "mask-border",
      value: MaskBorder,
    |}
  | {|
      property: "-webkit-mask-composite",
      value: WebKitMaskComposite[],
    |}
  | {|
      property: "mask-source-type",
      value: WebKitMaskSourceType[],
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image",
      value: BorderImage,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-source",
      value: Image,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-slice",
      value: BorderImageSlice,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-width",
      value: RectFor_BorderImageSideWidth,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-outset",
      value: RectFor_LengthOrNumber,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "mask-box-image-repeat",
      value: BorderImageRepeat,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "filter",
      value: FilterList,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "backdrop-filter",
      value: FilterList,
      vendorPrefix: VendorPrefix,
    |}
  | {|
      property: "z-index",
      value: ZIndex,
    |}
  | {|
      property: "container-type",
      value: ContainerType,
    |}
  | {|
      property: "container-name",
      value: ContainerNameList,
    |}
  | {|
      property: "container",
      value: Container,
    |}
  | {|
      property: "view-transition-name",
      value: ViewTransitionName,
    |}
  | {|
      property: "view-transition-class",
      value: NoneOrCustomIdentList,
    |}
  | {|
      property: "view-transition-group",
      value: ViewTransitionGroup,
    |}
  | {|
      property: "color-scheme",
      value: ColorScheme,
    |}
  | {|
      property: "all",
      value: CSSWideKeyword,
    |}
  | {|
      property: "unparsed",
      value: UnparsedProperty,
    |}
  | {|
      property: "custom",
      value: CustomProperty,
    |};
/**
 * A CSS [`<image>`](https://www.w3.org/TR/css-images-3/#image-values) value.
 */
export type Image =
  | {|
      type: "none",
    |}
  | {|
      type: "url",
      value: Url,
    |}
  | {|
      type: "gradient",
      value: Gradient,
    |}
  | {|
      type: "image-set",
      value: ImageSet,
    |};
/**
 * A CSS [`<gradient>`](https://www.w3.org/TR/css-images-3/#gradients) value.
 */
export type Gradient =
  | {|
      /**
       * The direction of the gradient.
       */
      direction: LineDirection,

      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_LengthValue[],
      type: "linear",

      /**
       * The vendor prefixes for the gradient.
       */
      vendorPrefix: VendorPrefix,
    |}
  | {|
      /**
       * The direction of the gradient.
       */
      direction: LineDirection,

      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_LengthValue[],
      type: "repeating-linear",

      /**
       * The vendor prefixes for the gradient.
       */
      vendorPrefix: VendorPrefix,
    |}
  | {|
      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_LengthValue[],

      /**
       * The position of the gradient.
       */
      position: Position,

      /**
       * The shape of the gradient.
       */
      shape: EndingShape,
      type: "radial",

      /**
       * The vendor prefixes for the gradient.
       */
      vendorPrefix: VendorPrefix,
    |}
  | {|
      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_LengthValue[],

      /**
       * The position of the gradient.
       */
      position: Position,

      /**
       * The shape of the gradient.
       */
      shape: EndingShape,
      type: "repeating-radial",

      /**
       * The vendor prefixes for the gradient.
       */
      vendorPrefix: VendorPrefix,
    |}
  | {|
      /**
       * The angle of the gradient.
       */
      angle: Angle,

      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_Angle[],

      /**
       * The position of the gradient.
       */
      position: Position,
      type: "conic",
    |}
  | {|
      /**
       * The angle of the gradient.
       */
      angle: Angle,

      /**
       * The color stops and transition hints for the gradient.
       */
      items: GradientItemFor_DimensionPercentageFor_Angle[],

      /**
       * The position of the gradient.
       */
      position: Position,
      type: "repeating-conic",
    |}
  | (
      | {|
          type: "webkit-gradient",

          /**
           * The starting point of the gradient.
           */
          from: WebKitGradientPoint,
          kind: "linear",

          /**
           * The color stops in the gradient.
           */
          stops: WebKitColorStop[],

          /**
           * The ending point of the gradient.
           */
          to: WebKitGradientPoint,
        |}
      | {|
          type: "webkit-gradient",

          /**
           * The starting point of the gradient.
           */
          from: WebKitGradientPoint,
          kind: "radial",

          /**
           * The starting radius of the gradient.
           */
          r0: number,

          /**
           * The ending radius of the gradient.
           */
          r1: number,

          /**
           * The color stops in the gradient.
           */
          stops: WebKitColorStop[],

          /**
           * The ending point of the gradient.
           */
          to: WebKitGradientPoint,
        |}
    );
/**
 * The direction of a CSS `linear-gradient()`.
 *
 * See [LinearGradient](LinearGradient).
 */
export type LineDirection =
  | {|
      type: "angle",
      value: Angle,
    |}
  | {|
      type: "horizontal",
      value: HorizontalPositionKeyword,
    |}
  | {|
      type: "vertical",
      value: VerticalPositionKeyword,
    |}
  | {|
      /**
       * A horizontal position keyword, e.g. `left` or `right.
       */
      horizontal: HorizontalPositionKeyword,
      type: "corner",

      /**
       * A vertical posision keyword, e.g. `top` or `bottom`.
       */
      vertical: VerticalPositionKeyword,
    |};
/**
 * A horizontal position keyword.
 */
export type HorizontalPositionKeyword = "left" | "right";
/**
 * A vertical position keyword.
 */
export type VerticalPositionKeyword = "top" | "bottom";
/**
 * Either a color stop or interpolation hint within a gradient.
 *
 * This type is generic, and items may be either a [LengthPercentage](super::length::LengthPercentage) or [Angle](super::angle::Angle) depending on what type of gradient it is within.
 */
export type GradientItemFor_DimensionPercentageFor_LengthValue =
  | {|
      /**
       * The color of the color stop.
       */
      color: CssColor,

      /**
       * The position of the color stop.
       */
      position?: DimensionPercentageFor_LengthValue | null,
      type: "color-stop",
    |}
  | {|
      type: "hint",
      value: DimensionPercentageFor_LengthValue,
    |};
/**
 * A generic type that allows any kind of dimension and percentage to be used standalone or mixed within a `calc()` expression.
 *
 * <https://drafts.csswg.org/css-values-4/#mixed-percentages>
 */
export type DimensionPercentageFor_LengthValue =
  | {|
      type: "dimension",
      value: LengthValue,
    |}
  | {|
      type: "percentage",
      value: number,
    |}
  | {|
      type: "calc",
      value: CalcFor_DimensionPercentageFor_LengthValue,
    |};
/**
 * A mathematical expression used within the [`calc()`](https://www.w3.org/TR/css-values-4/#calc-func) function.
 *
 * This type supports generic value types. Values such as [Length](super::length::Length), [Percentage](super::percentage::Percentage), [Time](super::time::Time), and [Angle](super::angle::Angle) support `calc()` expressions.
 */
export type CalcFor_DimensionPercentageFor_LengthValue =
  | {|
      type: "value",
      value: DimensionPercentageFor_LengthValue,
    |}
  | {|
      type: "number",
      value: number,
    |}
  | {|
      type: "sum",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [
        CalcFor_DimensionPercentageFor_LengthValue,
        CalcFor_DimensionPercentageFor_LengthValue
      ],
    |}
  | {|
      type: "product",

      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [number, CalcFor_DimensionPercentageFor_LengthValue],
    |}
  | {|
      type: "function",
      value: MathFunctionFor_DimensionPercentageFor_LengthValue,
    |};
/**
 * A CSS [math function](https://www.w3.org/TR/css-values-4/#math-function).
 *
 * Math functions may be used in most properties and values that accept numeric values, including lengths, percentages, angles, times, etc.
 */
export type MathFunctionFor_DimensionPercentageFor_LengthValue =
  | {|
      type: "calc",
      value: CalcFor_DimensionPercentageFor_LengthValue,
    |}
  | {|
      type: 